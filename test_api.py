import requests
import json

# Test de l'API avec les m√™mes param√®tres que Streamlit
def test_api():
    print("üå± Test de l'API Mon Cacao avec param√®tres Streamlit")
    print("=" * 50)
    
    # URL de l'API
    base_url = "http://localhost:5000"
    
    try:
        # Test 1: V√©rifier que l'API est en ligne
        print("1. Test de connexion...")
        response = requests.get(f"{base_url}/health")
        if response.status_code == 200:
            print("‚úÖ API en ligne")
        else:
            print("‚ùå API hors ligne")
            return
        
        # Test 2: R√©cup√©rer les param√®tres attendus
        print("\n2. R√©cup√©ration des param√®tres...")
        response = requests.get(f"{base_url}/streamlit-params")
        if response.status_code == 200:
            params = response.json()
            print("‚úÖ Param√®tres r√©cup√©r√©s")
            print(f"   Param√®tres requis: {len(params['required_parameters'])}")
        else:
            print("‚ùå Impossible de r√©cup√©rer les param√®tres")
            return
        
        # Test 3: Test de pr√©diction avec donn√©es Streamlit
        print("\n3. Test de pr√©diction...")
        
        # Donn√©es de test identiques √† Streamlit
        test_data = {
            "age_verger": 15.0,
            "agroforest": "Non",
            "engrais": "Oui",
            "fumier": "Non",
            "maladie": "Non",
            "herbicide": "Non",
            "insecticide": "Oui",
            "fongicide": "Non",
            "cout_prod": 450000.0,
            "prix_a": 750000.0,
            "region": "Indenie-Djuablin",
            "pluviometrie": "Moyenne",
            "sexe": "Masculin",
            "competences": "oui, lire et √©crire"
        }
        
        response = requests.post(
            f"{base_url}/predict",
            headers={"Content-Type": "application/json"},
            data=json.dumps(test_data)
        )
        
        if response.status_code == 200:
            result = response.json()
            if result['success']:
                prediction = result['prediction']
                print("‚úÖ Pr√©diction r√©ussie!")
                print(f"   Productivit√©: {prediction['productivity_t_ha']} t/ha")
                print(f"   Revenu: {prediction['revenue_fcfa']} FCFA")
                print(f"   B√©n√©fice: {prediction['benefit_fcfa']} FCFA")
                print(f"   Confiance: {prediction['confidence']}%")
                print(f"   Recommandation: {prediction['recommendation']}")
            else:
                print("‚ùå Erreur dans la pr√©diction")
                print(f"   Erreur: {result.get('error', 'Inconnue')}")
        else:
            print(f"‚ùå Erreur HTTP: {response.status_code}")
            print(f"   R√©ponse: {response.text}")
        
        # Test 4: Informations sur le mod√®le
        print("\n4. Informations sur le mod√®le...")
        response = requests.get(f"{base_url}/model-info")
        if response.status_code == 200:
            model_info = response.json()
            print("‚úÖ Informations mod√®le r√©cup√©r√©es")
            print(f"   Type: {model_info['model_type']}")
            print(f"   Features: {len(model_info['features'])}")
            print(f"   Compatible Streamlit: {model_info.get('streamlit_compatible', False)}")
        else:
            print("‚ùå Impossible de r√©cup√©rer les infos mod√®le")
        
        print("\n" + "=" * 50)
        print("üéâ Tests termin√©s!")
        
    except requests.exceptions.ConnectionError:
        print("‚ùå Impossible de se connecter √† l'API")
        print("   V√©rifiez que l'API est d√©marr√©e sur http://localhost:5000")
    except Exception as e:
        print(f"‚ùå Erreur: {str(e)}")

if __name__ == "__main__":
    test_api()
