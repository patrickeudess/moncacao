#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script d'analyse automatis√©e de la page Score √âcologique
"""

import os
import re
from datetime import datetime

def analyser_score_ecologique():
    """Analyse compl√®te de la page Score √âcologique"""
    
    print("üîç Analyse Automatis√©e de la Page Score √âcologique")
    print("=" * 60)
    print(f"üìÖ Date d'analyse : {datetime.now().strftime('%d/%m/%Y √† %H:%M')}")
    print()
    
    # 1. Analyse des fichiers
    print("üìÅ ANALYSE DES FICHIERS")
    print("-" * 30)
    
    fichiers_analyse = [
        ("frontend/score-ecologique.html", "Page principale"),
        ("frontend/index.html", "Page d'accueil"),
        ("frontend/css/style.css", "Styles CSS"),
        ("test_score_ecologique.py", "Script de test"),
        ("SCORE_ECOLOGIQUE_DOCUMENTATION.md", "Documentation"),
        ("ANALYSE_SCORE_ECOLOGIQUE.md", "Analyse d√©taill√©e")
    ]
    
    fichiers_presents = []
    fichiers_manquants = []
    
    for fichier, description in fichiers_analyse:
        if os.path.exists(fichier):
            taille = os.path.getsize(fichier)
            fichiers_presents.append((fichier, description, taille))
            print(f"‚úÖ {fichier} - {description} ({taille} octets)")
        else:
            fichiers_manquants.append((fichier, description))
            print(f"‚ùå {fichier} - {description} (MANQUANT)")
    
    print()
    
    # 2. Analyse du contenu de la page principale
    print("üìÑ ANALYSE DU CONTENU")
    print("-" * 30)
    
    score_file = "frontend/score-ecologique.html"
    if os.path.exists(score_file):
        with open(score_file, 'r', encoding='utf-8') as f:
            contenu = f.read()
        
        print(f"üìä Taille du fichier : {len(contenu)} caract√®res")
        
        # Analyse du contenu
        analyses_contenu = [
            ("Structure HTML", r"<!DOCTYPE html>"),
            ("Balise head", r"<head>"),
            ("Balise body", r"<body>"),
            ("Titre de page", r"Score √âcologique"),
            ("Formulaire", r"<form"),
            ("JavaScript", r"<script>"),
            ("CSS inline", r"<style>"),
            ("Indicateurs", r"üå≥|üå±|üß™|üõ°Ô∏è|‚úÇÔ∏è|üíß|‚ôªÔ∏è|üê¶|üö´|‚úÖ"),
            ("Calcul de score", r"calcEcoScore"),
            ("LocalStorage", r"localStorage"),
            ("Responsive design", r"@media"),
            ("Animations", r"@keyframes|animation|transition")
        ]
        
        for element, pattern in analyses_contenu:
            if re.search(pattern, contenu, re.IGNORECASE):
                print(f"‚úÖ {element}")
            else:
                print(f"‚ùå {element}")
    else:
        print("‚ùå Fichier principal manquant - analyse impossible")
    
    print()
    
    # 3. Analyse de la navigation
    print("üß≠ ANALYSE DE LA NAVIGATION")
    print("-" * 30)
    
    index_file = "frontend/index.html"
    if os.path.exists(index_file):
        with open(index_file, 'r', encoding='utf-8') as f:
            contenu_index = f.read()
        
        nav_elements = [
            ("Carte Score √âcologique", r"Score √âcologique"),
            ("Lien vers la page", r"score-ecologique\.html"),
            ("Ic√¥ne √©cologique", r"fas fa-leaf"),
            ("Badge Nouveau", r"feature-badge"),
            ("Gradient vert", r"eco-icon")
        ]
        
        for element, pattern in nav_elements:
            if re.search(pattern, contenu_index, re.IGNORECASE):
                print(f"‚úÖ {element}")
            else:
                print(f"‚ùå {element}")
    else:
        print("‚ùå Page d'accueil manquante")
    
    print()
    
    # 4. Analyse des styles CSS
    print("üé® ANALYSE DES STYLES")
    print("-" * 30)
    
    css_file = "frontend/css/style.css"
    if os.path.exists(css_file):
        with open(css_file, 'r', encoding='utf-8') as f:
            contenu_css = f.read()
        
        css_elements = [
            ("Style eco-icon", r"\.eco-icon"),
            ("Gradient vert", r"linear-gradient.*#4ade80.*#22c55e"),
            ("Responsive design", r"@media"),
            ("Animations", r"@keyframes|animation"),
            ("Variables CSS", r"--primary-color|--secondary-color")
        ]
        
        for element, pattern in css_elements:
            if re.search(pattern, contenu_css, re.IGNORECASE):
                print(f"‚úÖ {element}")
            else:
                print(f"‚ùå {element}")
    else:
        print("‚ùå Fichier CSS manquant")
    
    print()
    
    # 5. Analyse des fonctionnalit√©s
    print("‚ö° ANALYSE DES FONCTIONNALIT√âS")
    print("-" * 30)
    
    fonctionnalites = [
        ("10 indicateurs environnementaux", "D√©finis dans la documentation"),
        ("Calcul de score pond√©r√©", "Algorithme d√©fini"),
        ("Classification par couleurs", "4 niveaux : Rouge, Orange, Vert, Or"),
        ("Historique localStorage", "Structure d√©finie"),
        ("Interface responsive", "Breakpoints d√©finis"),
        ("Animations CSS", "Transitions et keyframes"),
        ("Validation des donn√©es", "Contr√¥les utilisateur"),
        ("Export des r√©sultats", "Fonctionnalit√© pr√©vue")
    ]
    
    for fonctionnalite, statut in fonctionnalites:
        print(f"üìã {fonctionnalite} - {statut}")
    
    print()
    
    # 6. Calcul du score de compl√©tude
    print("üìà SCORE DE COMPL√âTUDE")
    print("-" * 30)
    
    total_elements = 0
    elements_presents = 0
    
    # Compter les √©l√©ments pr√©sents
    if os.path.exists(score_file):
        with open(score_file, 'r', encoding='utf-8') as f:
            contenu = f.read()
        
        elements_a_verifier = [
            r"<!DOCTYPE html>", r"<head>", r"<body>", r"Score √âcologique",
            r"<form", r"<script>", r"<style>", r"calcEcoScore", r"localStorage"
        ]
        
        for pattern in elements_a_verifier:
            total_elements += 1
            if re.search(pattern, contenu, re.IGNORECASE):
                elements_presents += 1
    
    # Ajouter les fichiers
    total_elements += len(fichiers_analyse)
    elements_presents += len(fichiers_presents)
    
    if total_elements > 0:
        score_completude = (elements_presents / total_elements) * 100
        print(f"üìä Score de compl√©tude : {score_completude:.1f}%")
        
        if score_completude >= 90:
            niveau = "üü¢ Excellent"
        elif score_completude >= 70:
            niveau = "üü° Bon"
        elif score_completude >= 50:
            niveau = "üü† Moyen"
        else:
            niveau = "üî¥ Critique"
        
        print(f"üèÜ Niveau : {niveau}")
    else:
        print("‚ùå Impossible de calculer le score")
    
    print()
    
    # 7. Recommandations
    print("üí° RECOMMANDATIONS")
    print("-" * 30)
    
    if len(fichiers_manquants) > 0:
        print("üîß Actions imm√©diates :")
        for fichier, description in fichiers_manquants:
            print(f"   ‚Ä¢ Cr√©er {fichier} - {description}")
    
    if os.path.exists(score_file):
        with open(score_file, 'r', encoding='utf-8') as f:
            contenu = f.read()
        
        if len(contenu) < 1000:  # Page trop courte
            print("üîß D√©veloppement requis :")
            print("   ‚Ä¢ Impl√©menter la structure HTML compl√®te")
            print("   ‚Ä¢ Ajouter les 10 indicateurs environnementaux")
            print("   ‚Ä¢ Cr√©er les styles CSS")
            print("   ‚Ä¢ D√©velopper les fonctionnalit√©s JavaScript")
    
    print("üöÄ Am√©liorations futures :")
    print("   ‚Ä¢ Ajouter des recommandations personnalis√©es")
    print("   ‚Ä¢ Impl√©menter l'export PDF")
    print("   ‚Ä¢ Int√©grer des comparaisons entre producteurs")
    print("   ‚Ä¢ Ajouter des analytics avanc√©s")
    
    print()
    
    # 8. R√©sum√©
    print("üìã R√âSUM√â DE L'ANALYSE")
    print("-" * 30)
    
    print(f"üìÅ Fichiers pr√©sents : {len(fichiers_presents)}/{len(fichiers_analyse)}")
    print(f"üìÑ Documentation : {'‚úÖ' if os.path.exists('SCORE_ECOLOGIQUE_DOCUMENTATION.md') else '‚ùå'}")
    print(f"üß™ Tests : {'‚úÖ' if os.path.exists('test_score_ecologique.py') else '‚ùå'}")
    print(f"üé® Styles : {'‚úÖ' if os.path.exists('frontend/css/style.css') else '‚ùå'}")
    print(f"üß≠ Navigation : {'‚úÖ' if 'Score √âcologique' in contenu_index else '‚ùå'}")
    
    print()
    print("üéâ Analyse termin√©e !")

if __name__ == "__main__":
    analyser_score_ecologique()
